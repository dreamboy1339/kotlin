import org.jetbrains.dokka.Platform
import org.jetbrains.dokka.DokkaConfiguration

plugins {
    id "de.undercouch.download" version "4.1.1"
    id "base"
    id "java"
    id "org.jetbrains.dokka"
}

evaluationDependsOnChildren()

def pKotlinBig() { return project('kotlin_big').extensions }
def pKotlinNative() { return project('kotlin_native').extensions }

task extractAll()

extractAll.dependsOn ':kotlin_big:extractLibs'

def outputDir = "$buildDir/doc"


task callDokka() {
    delete(outputDir)
    dependsOn extractAll
}

repositories {
    mavenCentral()
    maven {
        url 'https://maven.pkg.jetbrains.space/kotlin/p/dokka/dev'
    }
    mavenLocal()
}
final String dokka_version = findProperty("dokka_version")

dependencies {
    dokkaPlugin project(":plugins:dokka-samples-transformer-plugin")
    dokkaPlugin project(":plugins:dokka-stdlib-configuration-plugin")
    dokkaPlugin project(":plugins:dokka-version-filter-plugin")
    dokkaPlugin "org.jetbrains.dokka:versioning-plugin:$dokka_version"
}

void createStdLibVersionedDocTask(String version, Boolean isLatest) {
    tasks.register("stdlib_" + version, org.jetbrains.dokka.gradle.DokkaTask) {
        def outputDir = "$buildDir/doc"

        def github_revision = pKotlinBig().github_revision

        def kotlin_root = pKotlinBig().kotlin_root
        def kotlin_libs = pKotlinBig().kotlin_libs
        def kotlin_native_root = pKotlinNative().kotlin_native_root
        def kotlin_native_libs = pKotlinNative().kotlin_native_libs

        def kotlin_stdlib_dir = "$kotlin_root/libraries/stdlib"

        def stdlibIncludeMd = "$kotlin_root/libraries/stdlib/src/Module.md"
        def stdlibSamples = "$kotlin_root/libraries/stdlib/samples/test"

        def stdlibCommonClasspath = ["$kotlin_libs/kotlin-stdlib-common/".toString()]
        def stdlibJvmClasspath = ["$kotlin_libs/kotlin-stdlib/".toString(), "$kotlin_stdlib_dir/jdk7/src".toString(), "$kotlin_libs/kotlin-stdlib-jdk8/".toString(), "$kotlin_root/core/reflection.jvm/src".toString()]
        def stdlibNativeClasspath = ["$kotlin_native_libs/klib/common/stdlib".toString()]
        def stdlibJsClasspath = ["$kotlin_libs/kotlin-stdlib-js/".toString()]

        def kotlinLanguageVersion = version
        if (version == "1.0")
            kotlinLanguageVersion =  "1.1"


        moduleName.set("stdlib")
        if (isLatest) {
            outputDirectory.set(new File(outputDir, "/kotlin-stdlib/latest"))
            pluginsMapConfiguration.set(["org.jetbrains.dokka.base.DokkaBase"             : """{ "mergeImplicitExpectActualDeclarations": "true", "templatesDir": "${projectDir.toString().replace('\\', '/')}/templates" }""",
                                         "org.jetbrains.dokka.versioning.VersioningPlugin": """{ "version": "$version", "olderVersionsDir": "${outputDir.toString().replace('\\', '/')}//kotlin-stdlib/old" }"""])
        } else {
            outputDirectory.set(new File(outputDir, "/kotlin-stdlib/old/" + version))
            pluginsMapConfiguration.set(["org.jetbrains.dokka.base.DokkaBase"                : """{ "mergeImplicitExpectActualDeclarations": "true", "templatesDir": "${projectDir.toString().replace('\\', '/')}/templates" }""",
                                         "org.jetbrains.dokka.kotlinlang.VersionFilterPlugin": """{ "targetVersion": "$version" }""",
                                         "org.jetbrains.dokka.versioning.VersioningPlugin"   : """{ "version": "$version" }"""])
        }
        dokkaSourceSets {
            if (version != "1.0" && version != "1.1") { // Common platform since Kotlin 1.2
                register("kotlin-stdlib-common") {
                    documentedVisibilities.set([DokkaConfiguration.Visibility.PUBLIC, DokkaConfiguration.Visibility.PROTECTED])
                    skipDeprecated.set(false)
                    jdkVersion.set(8)
                    platform.set(Platform.common)
                    includes.from(stdlibIncludeMd.toString())
                    noStdlibLink.set(true)
                    noJdkLink.set(true)
                    classpath.setFrom(stdlibCommonClasspath)
                    languageVersion.set(kotlinLanguageVersion)

                    samples.from(stdlibSamples.toString())
                    displayName.set("Common")
                    sourceRoots.from("$kotlin_root/core/builtins/native")
                    sourceRoots.from("$kotlin_root/core/builtins/src/")

                    sourceRoots.from("$kotlin_stdlib_dir/common/src")
                    sourceRoots.from("$kotlin_stdlib_dir/src")
                    sourceRoots.from("$kotlin_stdlib_dir/unsigned/src")
                    sourceLink {
                        localDirectory.set(file(kotlin_root))
                        remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                        remoteLineSuffix.set("#L")
                    }
                }
            }

            register("kotlin-stdlib-java-common") {
                documentedVisibilities.set([DokkaConfiguration.Visibility.PUBLIC, DokkaConfiguration.Visibility.PROTECTED])
                skipDeprecated.set(false)
                jdkVersion.set(8)
                platform.set(Platform.jvm)
                includes.from(stdlibIncludeMd.toString())
                noStdlibLink.set(true)
                classpath.setFrom(stdlibJvmClasspath)
                languageVersion.set(kotlinLanguageVersion)

                samples.from(stdlibSamples.toString())
                displayName.set("JVM")
                if (version != "1.0" && version != "1.1") {
                    dependsOn("kotlin-stdlib-common")
                }
                //sourceRoots.from("$kotlin_root/core/builtins/native")
                //sourceRoots.from("$kotlin_root/core/builtins/src")

                sourceRoots.from("$kotlin_stdlib_dir/jvm/src")

                sourceRoots.from("$kotlin_root/core/reflection.jvm/src")
                sourceRoots.from("$kotlin_stdlib_dir/jvm/runtime/kotlin/jvm/annotations")
                sourceRoots.from("$kotlin_stdlib_dir/jvm/runtime/kotlin/jvm/JvmClassMapping.kt")
                sourceRoots.from("$kotlin_stdlib_dir/jvm/runtime/kotlin/jvm/PurelyImplements.kt")
                sourceRoots.from("$kotlin_stdlib_dir/jvm/runtime/kotlin/TypeAliases.kt")
                sourceRoots.from("$kotlin_stdlib_dir/jvm/runtime/kotlin/text/TypeAliases.kt")

                // for Kotlin 1.0 and 1.1 hack: Common platform becomes JVM
                if (version == "1.0" || version == "1.1") {
                    sourceRoots.from("$kotlin_root/core/builtins/native")
                    sourceRoots.from("$kotlin_root/core/builtins/src/")

                    sourceRoots.from("$kotlin_stdlib_dir/common/src")
                    sourceRoots.from("$kotlin_stdlib_dir/src")
                    sourceRoots.from("$kotlin_stdlib_dir/unsigned/src")
                }
                perPackageOption {
                    matchingRegex.set("kotlin.reflect.jvm.internal(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.jvm.functions(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.jvm.internal(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.coroutines.jvm.internal(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.coroutines.experimental.migration(\$|\\.).*")
                    suppress.set(true)
                }
                sourceLink {
                    localDirectory.set(file(kotlin_root))
                    remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                    remoteLineSuffix.set("#L")
                }
            }
            register("kotlin-stdlib-jdk8") {
                documentedVisibilities.set([DokkaConfiguration.Visibility.PUBLIC, DokkaConfiguration.Visibility.PROTECTED])
                skipDeprecated.set(false)
                jdkVersion.set(8)
                platform.set(Platform.jvm)
                includes.from(stdlibIncludeMd.toString())
                noStdlibLink.set(true)
                classpath.setFrom(stdlibJvmClasspath)
                languageVersion.set(kotlinLanguageVersion)

                samples.from(stdlibSamples.toString())
                displayName.set("JRE8")
                dependsOn("kotlin-stdlib-java-common")
                if (version != "1.0" && version != "1.1") {
                    dependsOn("kotlin-stdlib-common")
                }
                sourceRoots.from("$kotlin_stdlib_dir/jdk8/src")
                perPackageOption {
                    matchingRegex.set("kotlin.reflect.jvm.internal")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.jvm.functions(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.jvm.internal(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.coroutines.jvm.internal(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.coroutines.experimental.migration(\$|\\.).*")
                    suppress.set(true)
                }
                sourceLink {
                    localDirectory.set(file(kotlin_root))
                    remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                    remoteLineSuffix.set("#L")
                }
            }
            register("kotlin-stdlib-jdk7") {
                documentedVisibilities.set([DokkaConfiguration.Visibility.PUBLIC, DokkaConfiguration.Visibility.PROTECTED])
                skipDeprecated.set(false)
                jdkVersion.set(8)
                platform.set(Platform.jvm)
                includes.from(stdlibIncludeMd.toString())
                noStdlibLink.set(true)
                classpath.setFrom(stdlibJvmClasspath)
                languageVersion.set(kotlinLanguageVersion)


                samples.from(stdlibSamples.toString())
                displayName.set("JRE7")
                dependsOn("kotlin-stdlib-java-common")
                if (version != "1.0" && version != "1.1") {
                    dependsOn("kotlin-stdlib-common")
                }
                sourceRoots.from("$kotlin_stdlib_dir/jdk7/src")
                perPackageOption {
                    matchingRegex.set("kotlin.reflect.jvm.internal(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.jvm.functions(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.jvm.internal(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.coroutines.jvm.internal(\$|\\.).*")
                    suppress.set(true)
                }
                perPackageOption {
                    matchingRegex.set("kotlin.coroutines.experimental.migration(\$|\\.).*")
                    suppress.set(true)
                }
                sourceLink {
                    localDirectory.set(file(kotlin_root))
                    remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                    remoteLineSuffix.set("#L")
                }
            }
            if (version != "1.0") { // JS platform since Kotlin 1.1
                register("kotlin-stdlib-js") {
                    documentedVisibilities.set([DokkaConfiguration.Visibility.PUBLIC, DokkaConfiguration.Visibility.PROTECTED])
                    skipDeprecated.set(false)
                    jdkVersion.set(8)
                    platform.set(Platform.js)
                    includes.from(stdlibIncludeMd.toString())
                    noStdlibLink.set(true)
                    noJdkLink.set(true)
                    classpath.setFrom(stdlibJsClasspath)
                    languageVersion.set(kotlinLanguageVersion)

                    samples.from(stdlibSamples.toString())
                    displayName.set("JS")
                    if (version != "1.0" && version != "1.1") {
                        dependsOn("kotlin-stdlib-common")
                    }
                    //sourceRoots.from("$kotlin_root/core/builtins/native")
                    //sourceRoots.from("$kotlin_root/core/builtins/src")

                    sourceRoots.from("$kotlin_stdlib_dir/js/src")
                    sourceRoots.from("$kotlin_stdlib_dir/js-v1/src")

                    // for Kotlin 1.1 hack: Common platform becomes JVM
                    if (version == "1.1") {
                        sourceRoots.from("$kotlin_root/core/builtins/native")
                        sourceRoots.from("$kotlin_root/core/builtins/src/")

                        //sourceRoots.from("$kotlin_stdlib_dir/common/src") // is included  in /js-v1/src folder
                        sourceRoots.from("$kotlin_stdlib_dir/src")
                        sourceRoots.from("$kotlin_stdlib_dir/unsigned/src")
                    }

                    perPackageOption {
                        matchingRegex.set("org.w3c(\$|\\.).*")
                        reportUndocumented.set(false)
                    }
                    perPackageOption {
                        matchingRegex.set("org.khronos(\$|\\.).*")
                        reportUndocumented.set(false)
                    }
                    perPackageOption {
                        matchingRegex.set("jquery(\$|\\.).*")
                        suppress.set(true)
                    }
                    perPackageOption {
                        matchingRegex.set("kotlin.reflect.jvm.internal(\$|\\.).*")
                        suppress.set(true)
                    }
                    perPackageOption {
                        matchingRegex.set("kotlin.js.internal(\$|\\.).*")
                        suppress.set(true)
                    }
                    sourceLink {
                        localDirectory.set(file(kotlin_root))
                        remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                        remoteLineSuffix.set("#L")
                    }
                }
            }
            if (version != "1.0" && version != "1.1" && version != "1.2") { // Native platform since Kotlin 1.3
                register("kotlin-stdlib-native") {
                    documentedVisibilities.set([DokkaConfiguration.Visibility.PUBLIC, DokkaConfiguration.Visibility.PROTECTED])
                    skipDeprecated.set(false)
                    jdkVersion.set(8)
                    platform.set(Platform.native)
                    includes.from(stdlibIncludeMd.toString())
                    noStdlibLink.set(true)
                    noJdkLink.set(true)
                    classpath.setFrom(stdlibNativeClasspath)
                    languageVersion.set(kotlinLanguageVersion)

                    samples.from(stdlibSamples.toString())
                    displayName.set("Native")
                    dependsOn("kotlin-stdlib-common")

                    sourceRoots.from("$kotlin_native_root/Interop/Runtime/src/main/kotlin")
                    sourceRoots.from("$kotlin_native_root/Interop/Runtime/src/native/kotlin")
                    sourceRoots.from("$kotlin_native_root/Interop/JsRuntime/src/main/kotlin")
                    sourceRoots.from("$kotlin_native_root/runtime/src/main/kotlin")
                    sourceRoots.from("$kotlin_stdlib_dir/native-wasm/src")
                    perPackageOption {
                        matchingRegex.set("kotlin.native.internal(\$|\\.).*")
                        suppress.set(true)
                    }
                    perPackageOption {
                        matchingRegex.set("kotlin.test(\$|\\.).*")
                        suppress.set(true)
                    }
                    sourceLink {
                        localDirectory.set(file(kotlin_root))
                        remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                        remoteLineSuffix.set("#L")
                    }
                }
            }
        }
    }
}

void createKotlinTestVersionedDocTask(String version, Boolean isLatest) {
    tasks.register("kotlin.test_" + version, org.jetbrains.dokka.gradle.DokkaTask) {
        def outputDir = "$buildDir/doc"

        def github_revision = pKotlinBig().github_revision

        def kotlin_root = pKotlinBig().kotlin_root
        def kotlin_libs = pKotlinBig().kotlin_libs
        def kotlin_native_root = pKotlinNative().kotlin_native_root

        def kotlinTestIncludeMd = "$kotlin_root/libraries/kotlin.test/Module.md"

        def kotlinTestCommonClasspath = ["$kotlin_libs/kotlin-test-common".toString()]
        def kotlinTestJunitClasspath = ["$kotlin_libs/kotlin-test-junit".toString()]
        def kotlinTestJunit5Classpath = ["$kotlin_libs/kotlin-test-junit5".toString()]
        def kotlinTestTestngClasspath = ["$kotlin_libs/kotlin-test-testng".toString()]
        def kotlinTestJsClasspath = ["$kotlin_libs/kotlin-test-js".toString()]
        def kotlinTestJvmClasspath = ["$kotlin_libs/kotlin-test".toString()]

        def stdlibPackageList = new URL("file:///$outputDir/kotlin-stdlib/package-list".toString())
        def junit5PackageList = new URL("https://junit.org/junit5/docs/current/api/element-list".toString())
        def kotlinLanguageVersion = version

        moduleName.set("kotlin.test")

        if (isLatest) {
            outputDirectory.set(new File(outputDir, "/kotlin.test/latest"))
            pluginsMapConfiguration.set(["org.jetbrains.dokka.base.DokkaBase"             : """{ "mergeImplicitExpectActualDeclarations": "true", "templatesDir": "${projectDir.toString().replace('\\', '/')}/templates" }""",
                                         "org.jetbrains.dokka.versioning.VersioningPlugin": """{ "version": "$version", "olderVersionsDir": "${outputDir.toString().replace('\\', '/')}//kotlin.test/old" }"""])
        } else {
            outputDirectory.set(new File(outputDir, "/kotlin.test/old/" + version))
            pluginsMapConfiguration.set(["org.jetbrains.dokka.base.DokkaBase"                : """{ "mergeImplicitExpectActualDeclarations": "true", "templatesDir": "${projectDir.toString().replace('\\', '/')}/templates" }""",
                                         "org.jetbrains.dokka.kotlinlang.VersionFilterPlugin": """{ "targetVersion": "$version" }""",
                                         "org.jetbrains.dokka.versioning.VersioningPlugin"   : """{ "version": "$version" }"""])
        }

        dokkaSourceSets {
            "kotlin-test-common" {
                skipDeprecated.set(false)
                jdkVersion.set(8)
                platform.set(Platform.common)
                includes.from(kotlinTestIncludeMd.toString())
                classpath.setFrom(kotlinTestCommonClasspath)
                languageVersion.set(kotlinLanguageVersion)

                displayName.set("Common")
                sourceRoots.from("$kotlin_root/libraries/kotlin.test/common/src/main/kotlin")
                sourceRoots.from("$kotlin_root/libraries/kotlin.test/annotations-common/src/main/kotlin")

                sourceLink {
                    localDirectory.set(file(kotlin_root))
                    remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                    remoteLineSuffix.set("#L")
                }
            }

            "kotlin-test-jvm" {
                skipDeprecated.set(false)
                jdkVersion.set(8)
                platform.set(Platform.jvm)
                includes.from(kotlinTestIncludeMd.toString())
                classpath.setFrom(kotlinTestJvmClasspath)
                languageVersion.set(kotlinLanguageVersion)

                displayName.set("JVM")
                sourceRoots.from("$kotlin_root/libraries/kotlin.test/jvm/src/main/kotlin")
                perPackageOption {
                    matchingRegex.set("org.junit(\$|\\.).*")
                    skipDeprecated.set(true)
                }
                sourceLink {
                    localDirectory.set(file(kotlin_root))
                    remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                    remoteLineSuffix.set("#L")
                }
            }

            "kotlin-test-JUnit" {
                skipDeprecated.set(false)
                jdkVersion.set(8)
                platform.set(Platform.jvm)
                includes.from(kotlinTestIncludeMd.toString())
                classpath.setFrom(kotlinTestJunitClasspath)
                languageVersion.set(kotlinLanguageVersion)

                displayName.set("JUnit")
                sourceRoots.from("$kotlin_root/libraries/kotlin.test/junit/src/main/kotlin")

                sourceLink {
                    localDirectory.set(file(kotlin_root))
                    remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                    remoteLineSuffix.set("#L")
                }
                externalDocumentationLink {
                    url.set(new URL("https://kotlinlang.org/api/latest/jvm/stdlib/"))
                    packageListUrl.set(stdlibPackageList)
                }
                externalDocumentationLink {
                    url.set(new URL("http://junit.org/junit4/javadoc/latest/"))
                    packageListUrl.set(new URL("http://junit.org/junit4/javadoc/latest/package-list"))
                }
            }

            "kotlin-test-JUnit5" {
                skipDeprecated.set(false)
                jdkVersion.set(8)
                platform.set(Platform.jvm)
                includes.from(kotlinTestIncludeMd.toString())
                classpath.setFrom(kotlinTestJunit5Classpath)
                languageVersion.set(kotlinLanguageVersion)

                displayName.set("JUnit5")
                sourceRoots.from("$kotlin_root/libraries/kotlin.test/junit5/src/main/kotlin")

                sourceLink {
                    localDirectory.set(file(kotlin_root))
                    remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                    remoteLineSuffix.set("#L")
                }
                externalDocumentationLink {
                    url.set(new URL("https://kotlinlang.org/api/latest/jvm/stdlib/"))
                    packageListUrl.set(stdlibPackageList)
                }
                externalDocumentationLink {
                    url.set(new URL("https://junit.org/junit5/docs/current/api/"))
                    packageListUrl.set(junit5PackageList)
                }
            }

            "kotlin-test-TestNG" {
                skipDeprecated.set(false)
                jdkVersion.set(8)
                platform.set(Platform.jvm)
                includes.from(kotlinTestIncludeMd.toString())
                classpath.setFrom(kotlinTestTestngClasspath)
                languageVersion.set(kotlinLanguageVersion)

                displayName.set("TestNG")
                sourceRoots.from("$kotlin_root/libraries/kotlin.test/testng/src/main/kotlin")

                sourceLink {
                    localDirectory.set(file(kotlin_root))
                    remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                    remoteLineSuffix.set("#L")
                }
                externalDocumentationLink {
                    url.set(new URL("https://kotlinlang.org/api/latest/jvm/stdlib/"))
                    packageListUrl.set(stdlibPackageList)
                }
                // externalDocumentationLink {
                //     url.set(new URL("https://jitpack.io/com/github/cbeust/testng/master/javadoc/"))
                //     packageListUrl.set(new URL("https://jitpack.io/com/github/cbeust/testng/master/javadoc/package-list"))
                // }
            }
            if (version != "1.0") { // JS platform since Kotlin 1.1
                "kotlin-test-js" {
                    skipDeprecated.set(false)
                    jdkVersion.set(8)
                    platform.set(Platform.js)
                    includes.from(kotlinTestIncludeMd.toString())
                    classpath.setFrom(kotlinTestJsClasspath)
                    languageVersion.set(kotlinLanguageVersion)

                    displayName.set("JS")
                    sourceRoots.from("$kotlin_root/libraries/kotlin.test/js/src/main/kotlin")

                    sourceLink {
                        localDirectory.set(file(kotlin_root))
                        remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                        remoteLineSuffix.set("#L")
                    }
                    perPackageOption {
                        matchingRegex.set("org.junit(\$|\\.).*")
                        skipDeprecated.set(true)
                    }
                    externalDocumentationLink {
                        url.set(new URL("https://kotlinlang.org/api/latest/jvm/stdlib/"))
                        packageListUrl.set(stdlibPackageList)
                    }
                }
            }
            if (version != "1.0" && version != "1.1" && version != "1.2") { // Native platform since Kotlin 1.3
                "kotlin-test-native" {
                    skipDeprecated.set(false)
                    jdkVersion.set(8)
                    platform.set(Platform.native)
                    includes.from(kotlinTestIncludeMd.toString())
                    classpath.setFrom(kotlinTestJsClasspath)
                    languageVersion.set(kotlinLanguageVersion)

                    displayName.set("Native")
                    sourceRoots.from("$kotlin_native_root/runtime/src/main/kotlin/kotlin/test")

                    sourceLink {
                        localDirectory.set(file(kotlin_root))
                        remoteUrl.set(new URL("https://github.com/JetBrains/kotlin/tree/$github_revision"))
                        remoteLineSuffix.set("#L")
                    }
                    externalDocumentationLink {
                        url.set(new URL("https://kotlinlang.org/api/latest/jvm/stdlib/"))
                        packageListUrl.set(stdlibPackageList)
                    }
                }
            }
        }
    }
}

gradle.projectsEvaluated {
    String[] versions = ["1.0", "1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "1.7", "1.8"]

    task buildStdLibDoc() {
        createStdLibVersionedDocTask(versions[versions.length - 1], true)
        for(int i = 0; i < versions.length -1; ++i) {
            createStdLibVersionedDocTask(versions[i], false);
            dependsOn tasks.named("stdlib_"+ versions[i])
        }

        def latestVersionTask = tasks.named("stdlib_"+ versions[versions.length - 1])
        finalizedBy latestVersionTask
    }

    task buildKotlinTestDoc() {
        createKotlinTestVersionedDocTask(versions[versions.length - 1], true)
        for(int i = 0; i < versions.length -1; ++i) {
            createKotlinTestVersionedDocTask(versions[i], false);
            dependsOn tasks.named("kotlin.test_"+ versions[i])
        }

        def latestVersionTask = tasks.named("kotlin.test_"+ versions[versions.length - 1])
        finalizedBy latestVersionTask
    }

    callDokka.finalizedBy buildStdLibDoc
    buildStdLibDoc.finalizedBy buildKotlinTestDoc
}
